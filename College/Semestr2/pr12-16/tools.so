!<arch>
node_list.c/    0           0     0     644     439       `
# include "../domain/business_logic/node_list.h"
# include <stdio.h>

void add_node(node_list* list, void* value )
{
    node user_node = {.value = value, .next = NULL};

    if (list->head == NULL){
        list->head = &user_node;

        list->tail = &user_node;
    }
    else{
        list->tail->next = &user_node;

        list->tail = &user_node;
    }

    list->count++;
}

# define INIT_NODE_LIST {.head = NULL, .tail = NULL, }
logging.c/      0           0     0     644     1706      `
# include "../domain/business_logic/logging.h"
# include <stdio.h>
# include <time.h>

void log_current_time()
{
    time_t to_time = time(NULL);

    struct tm* current_time = localtime(&to_time);

    printf("%d:%d:%d", current_time->tm_hour, current_time->tm_min, current_time->tm_sec);
}

void log_to_console(log_worker worker, char* information)
{
    printf("\033[0;33m");
    log_current_time();
    printf("\n");
    printf("\033[0;37m");

    printf("%s", information);
}

void logger_to_console(log_worker worker)
{
    worker.logger[ worker.logger_count ] = log_to_console;

    worker.logger_count++;
}

void log_to_text_file(log_worker worker, char* information)
{
    worker.context.write( worker.context, information );

    printf("\033[0;33m");
    printf("A text file written to - ");
    log_current_time();
    printf("\n");
    printf("\033[0;37m");
}

void logger_to_text_file(log_worker worker)
{
    worker.logger[ worker.logger_count ] = log_to_text_file;

    worker.logger_count++;
}

void log_to_binary_file(log_worker worker, char* information)
{
    worker.context.binary_write( worker.context, information );

    printf("\033[0;33m");
    printf("A binary file written to - ");
    log_current_time();
    printf("\n");
    printf("\033[0;37m");
}

void logger_to_binary_file(log_worker worker)
{
    worker.logger[ worker.logger_count ] = log_to_binary_file;

    worker.logger_count++;
}

void logme(log_worker worker, char* information)
{
    for (int i = 0; i < worker.logger_count; i++)
    {
        worker.logger[i](worker, information);
    }
}

# define INIT_LOG_WORKER {.logger_count = 0, .file_context = NULL, .logme = logme. .log_current_time = log_current_time}file_context.c/ 0           0     0     644     791       `
# include "../domain/business_logic/file_context.h"
# include <stdio.h>
# include <string.h>

void write(file_context context, char* message)
{
    fputs(
        message,
        context.file_to_write
        );
}

void binary_write(file_context context, char* message)
{
    size_t message_length = strlen(message);

    fwrite(
        message,
        sizeof(char), 
        message_length, 
        context.binary_file_to_write
        );
}

void add_path(file_context context, char* path)
{
    context.file_to_write = fopen(
        strcat(path, "\\output.txt"),
        "w+"
    );

    context.binary_file_to_write = fopen(
        strcat(path, "\\output.bin"),
        "a+b"
    );
}

# define INIT_FILE_CONTEXT {.add_path = add_path, .write = write, .binary_write = binary_write}

